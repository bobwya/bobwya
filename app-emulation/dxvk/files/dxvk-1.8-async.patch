diff --git a/dxvk.conf b/dxvk.conf
index 1cd42564..958e745d 100644
--- a/dxvk.conf
+++ b/dxvk.conf
@@ -215,4 +215,22 @@
 
 
+# Compile pipelines asynchronously if possible. This may reduce stuttering
+# in some games, but may also introduce rendering issues that might become
+# apparent over time. Do not report bugs with this option enabled.
+#
+# Supported values: True, False
+
+# dxvk.enableAsync = True
+
+
+# Sets number of async compiler threads.
+#
+# Supported values:
+# - 0 to automatically determine the number of threads to use
+# - any positive number to enforce the thread count
+
+# dxvk.numAsyncThreads = 0
+
+
 # Reported shader model
 #
diff --git a/meson.build b/meson.build
index 2e563e82..f13a0f96 100644
--- a/meson.build
+++ b/meson.build
@@ -110,5 +110,5 @@ endif
 
 dxvk_version = vcs_tag(
-  command: ['git', 'describe', '--dirty=+'],
+  command: ['git', 'describe', '--dirty=-async'],
   input:  'version.h.in',
   output: 'version.h')
diff --git a/src/dxvk/dxvk_context.cpp b/src/dxvk/dxvk_context.cpp
index e3236695..f85517fb 100644
--- a/src/dxvk/dxvk_context.cpp
+++ b/src/dxvk/dxvk_context.cpp
@@ -3744,5 +3744,7 @@ namespace dxvk {
     
     // Retrieve and bind actual Vulkan pipeline handle
-    m_gpActivePipeline = m_state.gp.pipeline->getPipelineHandle(m_state.gp.state, m_state.om.framebuffer->getRenderPass());
+    m_gpActivePipeline = m_state.gp.pipeline->getPipelineHandle(m_state.gp.state,
+                                                                m_state.om.framebuffer->getRenderPass(),
+                                                                this->checkAsyncCompilationCompat());
 
     if (unlikely(!m_gpActivePipeline))
@@ -3976,5 +3978,5 @@ namespace dxvk {
   
   
-  void DxvkContext::updateFramebuffer() {
+  void DxvkContext::updateFramebuffer(bool isDraw) {
     if (m_flags.test(DxvkContextFlag::GpDirtyFramebuffer)) {
       m_flags.clr(DxvkContextFlag::GpDirtyFramebuffer);
@@ -3998,4 +4000,9 @@ namespace dxvk {
       }
 
+      if (isDraw) {
+        for (uint32_t i = 0; i < fb->numAttachments(); i++)
+          fb->getAttachment(i).view->setRtBindingFrameId(m_device->getCurrentFrameId());
+      }
+
       m_flags.set(DxvkContextFlag::GpDirtyPipelineState);
     }
@@ -4408,5 +4415,5 @@ namespace dxvk {
 
     if (m_flags.test(DxvkContextFlag::GpDirtyFramebuffer))
-      this->updateFramebuffer();
+      this->updateFramebuffer(true);
 
     if (!m_flags.test(DxvkContextFlag::GpRenderPassBound))
@@ -4840,4 +4847,12 @@ namespace dxvk {
   }
   
+  bool DxvkContext::checkAsyncCompilationCompat() {
+    bool fbCompat = true;
+    for (uint32_t i = 0; fbCompat && i < m_state.om.framebuffer->numAttachments(); i++) {
+      const auto& attachment = m_state.om.framebuffer->getAttachment(i);
+      fbCompat &= attachment.view->getRtBindingAsyncCompilationCompat();
+    }
+    return fbCompat;
+  }
 
   DxvkGraphicsPipeline* DxvkContext::lookupGraphicsPipeline(
diff --git a/src/dxvk/dxvk_context.h b/src/dxvk/dxvk_context.h
index 324b43a5..ecdce271 100644
--- a/src/dxvk/dxvk_context.h
+++ b/src/dxvk/dxvk_context.h
@@ -1140,5 +1140,5 @@ namespace dxvk {
       const DxvkPipelineLayout*     layout);
 
-    void updateFramebuffer();
+    void updateFramebuffer(bool isDraw = false);
     
     void applyRenderTargetLoadLayouts();
@@ -1223,4 +1223,6 @@ namespace dxvk {
     void trackDrawBuffer();
 
+    bool checkAsyncCompilationCompat();
+
     DxvkGraphicsPipeline* lookupGraphicsPipeline(
       const DxvkGraphicsPipelineShaders&  shaders);
diff --git a/src/dxvk/dxvk_graphics.cpp b/src/dxvk/dxvk_graphics.cpp
index 82016607..e093fe31 100644
--- a/src/dxvk/dxvk_graphics.cpp
+++ b/src/dxvk/dxvk_graphics.cpp
@@ -63,8 +63,9 @@ namespace dxvk {
   VkPipeline DxvkGraphicsPipeline::getPipelineHandle(
     const DxvkGraphicsPipelineStateInfo& state,
-    const DxvkRenderPass*                renderPass) {
+    const DxvkRenderPass*                renderPass,
+          bool                           async) {
     DxvkGraphicsPipelineInstance* instance = nullptr;
 
-    { std::lock_guard<sync::Spinlock> lock(m_mutex);
+    { //std::lock_guard<sync::Spinlock> lock(m_mutex);
     
       instance = this->findInstance(state, renderPass);
@@ -73,5 +74,8 @@ namespace dxvk {
         return instance->pipeline();
       
-      instance = this->createInstance(state, renderPass);
+      if (async && m_pipeMgr->m_compiler != nullptr)
+        m_pipeMgr->m_compiler->queueCompilation(this, state, renderPass);
+      else
+        instance = this->createInstance(state, renderPass);
     }
     
@@ -84,11 +88,11 @@ namespace dxvk {
 
 
-  void DxvkGraphicsPipeline::compilePipeline(
+  bool DxvkGraphicsPipeline::compilePipeline(
     const DxvkGraphicsPipelineStateInfo& state,
     const DxvkRenderPass*                renderPass) {
     std::lock_guard<sync::Spinlock> lock(m_mutex);
 
-    if (!this->findInstance(state, renderPass))
-      this->createInstance(state, renderPass);
+    return (this->findInstance(state, renderPass) == nullptr) &&
+           (this->createInstance(state, renderPass) != nullptr);
   }
 
@@ -104,4 +108,5 @@ namespace dxvk {
     VkPipeline newPipelineHandle = this->createPipeline(state, renderPass);
 
+    std::lock_guard<sync::Spinlock> lock(m_mutex2);
     m_pipeMgr->m_numGraphicsPipelines += 1;
     return &m_pipelines.emplace_back(state, renderPass, newPipelineHandle);
@@ -112,4 +117,5 @@ namespace dxvk {
     const DxvkGraphicsPipelineStateInfo& state,
     const DxvkRenderPass*                renderPass) {
+    std::lock_guard<sync::Spinlock> lock(m_mutex2);
     for (auto& instance : m_pipelines) {
       if (instance.isCompatible(state, renderPass))
diff --git a/src/dxvk/dxvk_graphics.h b/src/dxvk/dxvk_graphics.h
index 4194599d..c48ee3ed 100644
--- a/src/dxvk/dxvk_graphics.h
+++ b/src/dxvk/dxvk_graphics.h
@@ -186,9 +186,11 @@ namespace dxvk {
      * \param [in] state Pipeline state vector
      * \param [in] renderPass The render pass
+     * \param [in] async Compile asynchronously
      * \returns Pipeline handle
      */
     VkPipeline getPipelineHandle(
       const DxvkGraphicsPipelineStateInfo&    state,
-      const DxvkRenderPass*                   renderPass);
+      const DxvkRenderPass*                   renderPass,
+            bool                              async);
     
     /**
@@ -199,9 +201,14 @@ namespace dxvk {
      * \param [in] state Pipeline state vector
      * \param [in] renderPass The render pass
+     * \returns \c true if compile succeeded
      */
-    void compilePipeline(
+    bool compilePipeline(
       const DxvkGraphicsPipelineStateInfo&    state,
       const DxvkRenderPass*                   renderPass);
     
+    void writePipelineStateToCache(
+      const DxvkGraphicsPipelineStateInfo& state,
+      const DxvkRenderPassFormat&          format) const;
+
   private:
     
@@ -222,4 +229,5 @@ namespace dxvk {
     // List of pipeline instances, shared between threads
     alignas(CACHE_LINE_SIZE) sync::Spinlock   m_mutex;
+    alignas(CACHE_LINE_SIZE) sync::Spinlock   m_mutex2;
     std::vector<DxvkGraphicsPipelineInstance> m_pipelines;
     
@@ -249,8 +257,4 @@ namespace dxvk {
       const DxvkGraphicsPipelineStateInfo& state) const;
     
-    void writePipelineStateToCache(
-      const DxvkGraphicsPipelineStateInfo& state,
-      const DxvkRenderPassFormat&          format) const;
-    
     void logPipelineState(
             LogLevel                       level,
diff --git a/src/dxvk/dxvk_image.h b/src/dxvk/dxvk_image.h
index 3852c6e6..113477fb 100644
--- a/src/dxvk/dxvk_image.h
+++ b/src/dxvk/dxvk_image.h
@@ -470,4 +470,35 @@ namespace dxvk {
     }
 
+    /**
+     * \brief Sets render target usage frame number
+     *
+     * The image view will track internally when
+     * it was last used as a render target. This
+     * info is used for async shader compilation.
+     * \param [in] frameId Frame number
+     */
+    void setRtBindingFrameId(uint32_t frameId) {
+      if (frameId != m_rtBindingFrameId) {
+        if (frameId == m_rtBindingFrameId + 1)
+          m_rtBindingFrameCount += 1;
+        else
+          m_rtBindingFrameCount = 0;
+
+        m_rtBindingFrameId = frameId;
+      }
+    }
+
+    /**
+     * \brief Checks for async pipeline compatibility
+     *
+     * Asynchronous pipeline compilation may be enabled if the
+     * render target has been drawn to in the previous frames.
+     * \param [in] frameId Current frame ID
+     * \returns \c true if async compilation is supported
+     */
+    bool getRtBindingAsyncCompilationCompat() const {
+      return m_rtBindingFrameCount >= 5;
+    }
+
   private:
     
@@ -478,4 +509,7 @@ namespace dxvk {
     VkImageView             m_views[ViewCount];
 
+    uint32_t m_rtBindingFrameId    = 0;
+    uint32_t m_rtBindingFrameCount = 0;
+
     void createView(VkImageViewType type, uint32_t numLayers);
     
diff --git a/src/dxvk/dxvk_options.cpp b/src/dxvk/dxvk_options.cpp
index 73dd69d1..c3da6bb5 100644
--- a/src/dxvk/dxvk_options.cpp
+++ b/src/dxvk/dxvk_options.cpp
@@ -11,4 +11,6 @@ namespace dxvk {
     useEarlyDiscard       = config.getOption<Tristate>("dxvk.useEarlyDiscard",        Tristate::Auto);
     hud                   = config.getOption<std::string>("dxvk.hud", "");
+    enableAsync           = config.getOption<bool>    ("dxvk.enableAsync",            false);
+    numAsyncThreads       = config.getOption<int32_t> ("dxvk.numAsyncThreads",        0);
   }
 
diff --git a/src/dxvk/dxvk_options.h b/src/dxvk/dxvk_options.h
index 3c5dde91..52a7be04 100644
--- a/src/dxvk/dxvk_options.h
+++ b/src/dxvk/dxvk_options.h
@@ -22,4 +22,11 @@ namespace dxvk {
     int32_t numCompilerThreads;
 
+    // Enable async pipelines
+    bool enableAsync;
+
+    /// Number of compiler threads
+    /// when using async pipelines
+    int32_t numAsyncThreads;
+
     /// Shader-related options
     Tristate useRawSsbo;
diff --git a/src/dxvk/dxvk_pipecompiler.cpp b/src/dxvk/dxvk_pipecompiler.cpp
new file mode 100644
index 00000000..40218acd
--- /dev/null
+++ b/src/dxvk/dxvk_pipecompiler.cpp
@@ -0,0 +1,76 @@
+#include "dxvk_device.h"
+#include "dxvk_graphics.h"
+#include "dxvk_pipecompiler.h"
+
+namespace dxvk {
+
+  DxvkPipelineCompiler::DxvkPipelineCompiler(const DxvkDevice* device) {
+    uint32_t numCpuCores = dxvk::thread::hardware_concurrency();
+    uint32_t numWorkers  = ((std::max(1u, numCpuCores) - 1) * 5) / 7;
+
+    if (numWorkers <  1) numWorkers =  1;
+    if (numWorkers > 32) numWorkers = 32;
+
+    if (device->config().numAsyncThreads > 0)
+      numWorkers = device->config().numAsyncThreads;
+
+    Logger::info(str::format("DXVK: Using ", numWorkers, " async compiler threads"));
+
+    // Start the compiler threads
+    m_compilerThreads.resize(numWorkers);
+
+    for (uint32_t i = 0; i < numWorkers; i++) {
+      m_compilerThreads.at(i) = dxvk::thread(
+        [this] { this->runCompilerThread(); });
+    }
+  }
+
+
+  DxvkPipelineCompiler::~DxvkPipelineCompiler() {
+    { std::lock_guard<std::mutex> lock(m_compilerLock);
+      m_compilerStop.store(true);
+    }
+
+    m_compilerCond.notify_all();
+    for (auto& thread : m_compilerThreads)
+      thread.join();
+  }
+
+
+  void DxvkPipelineCompiler::queueCompilation(
+    DxvkGraphicsPipeline*                   pipeline,
+    const DxvkGraphicsPipelineStateInfo&    state,
+    const DxvkRenderPass*                   renderPass) {
+    std::lock_guard<std::mutex> lock(m_compilerLock);
+    m_compilerQueue.push({ pipeline, state, renderPass });
+    m_compilerCond.notify_one();
+  }
+
+
+  void DxvkPipelineCompiler::runCompilerThread() {
+    env::setThreadName("dxvk-pcompiler");
+
+    while (!m_compilerStop.load()) {
+      PipelineEntry entry;
+
+      { std::unique_lock<std::mutex> lock(m_compilerLock);
+
+        m_compilerCond.wait(lock, [this] {
+          return m_compilerStop.load()
+              || m_compilerQueue.size() != 0;
+        });
+
+        if (m_compilerQueue.size() != 0) {
+          entry = std::move(m_compilerQueue.front());
+          m_compilerQueue.pop();
+        }
+      }
+
+      if (entry.pipeline != nullptr && entry.renderPass != nullptr &&
+          entry.pipeline->compilePipeline(entry.state, entry.renderPass)) {
+          entry.pipeline->writePipelineStateToCache(entry.state, entry.renderPass->format());
+      }
+    }
+  }
+
+}
diff --git a/src/dxvk/dxvk_pipecompiler.h b/src/dxvk/dxvk_pipecompiler.h
new file mode 100644
index 00000000..d7fcc2cf
--- /dev/null
+++ b/src/dxvk/dxvk_pipecompiler.h
@@ -0,0 +1,61 @@
+#pragma once
+
+#include <atomic>
+#include <condition_variable>
+#include <mutex>
+#include <queue>
+
+#include "../util/thread.h"
+#include "dxvk_include.h"
+
+namespace dxvk {
+
+  class DxvkDevice;
+  class DxvkGraphicsPipeline;
+  class DxvkGraphicsPipelineStateInfo;
+
+  /**
+   * \brief Pipeline compiler
+   *
+   * Asynchronous pipeline compiler
+   */
+  class DxvkPipelineCompiler : public RcObject {
+
+  public:
+
+    DxvkPipelineCompiler(const DxvkDevice* device);
+    ~DxvkPipelineCompiler();
+
+    /**
+     * \brief Compiles a pipeline asynchronously
+     *
+     * This should be used to compile graphics
+     * pipeline instances asynchronously.
+     * \param [in] pipeline The pipeline object
+     * \param [in] state The pipeline state info object
+     * \param [in] renderPass
+     */
+    void queueCompilation(
+      DxvkGraphicsPipeline*                   pipeline,
+      const DxvkGraphicsPipelineStateInfo&    state,
+      const DxvkRenderPass*                   renderPass);
+
+  private:
+
+    struct PipelineEntry {
+      DxvkGraphicsPipeline*                   pipeline = nullptr;
+      DxvkGraphicsPipelineStateInfo           state;
+      const DxvkRenderPass*                   renderPass = nullptr;
+    };
+
+    std::atomic<bool>           m_compilerStop = { false };
+    std::mutex                  m_compilerLock;
+    std::condition_variable     m_compilerCond;
+    std::queue<PipelineEntry>   m_compilerQueue;
+    std::vector<dxvk::thread>   m_compilerThreads;
+
+    void runCompilerThread();
+
+  };
+
+}
diff --git a/src/dxvk/dxvk_pipemanager.cpp b/src/dxvk/dxvk_pipemanager.cpp
index 2e29202e..1e767381 100644
--- a/src/dxvk/dxvk_pipemanager.cpp
+++ b/src/dxvk/dxvk_pipemanager.cpp
@@ -10,5 +10,9 @@ namespace dxvk {
   : m_device    (device),
     m_cache     (new DxvkPipelineCache(device->vkd())) {
+    std::string useAsync      = env::getEnvVar("DXVK_ASYNC");
     std::string useStateCache = env::getEnvVar("DXVK_STATE_CACHE");
+
+    if (useAsync == "1" || device->config().enableAsync)
+      m_compiler = new DxvkPipelineCompiler(device);
     
     if (useStateCache != "0" && device->config().enableStateCache)
diff --git a/src/dxvk/dxvk_pipemanager.h b/src/dxvk/dxvk_pipemanager.h
index 858928ca..4c12a4dc 100644
--- a/src/dxvk/dxvk_pipemanager.h
+++ b/src/dxvk/dxvk_pipemanager.h
@@ -7,4 +7,5 @@
 #include "dxvk_compute.h"
 #include "dxvk_graphics.h"
+#include "dxvk_pipecompiler.h"
 
 namespace dxvk {
@@ -96,4 +97,5 @@ namespace dxvk {
     Rc<DxvkPipelineCache>     m_cache;
     Rc<DxvkStateCache>        m_stateCache;
+    Rc<DxvkPipelineCompiler>  m_compiler;
 
     std::atomic<uint32_t>     m_numComputePipelines  = { 0 };
diff --git a/src/dxvk/meson.build b/src/dxvk/meson.build
index d1785d75..d31c8545 100644
--- a/src/dxvk/meson.build
+++ b/src/dxvk/meson.build
@@ -85,4 +85,5 @@ dxvk_src = files([
   'dxvk_options.cpp',
   'dxvk_pipecache.cpp',
+  'dxvk_pipecompiler.cpp',
   'dxvk_pipelayout.cpp',
   'dxvk_pipemanager.cpp',
