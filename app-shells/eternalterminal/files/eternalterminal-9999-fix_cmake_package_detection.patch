--- a/CMakeLists.txt	2023-05-18 09:24:29.033150214 +0100
+++ b/CMakeLists.txt	2023-05-18 12:18:35.645895500 +0100
@@ -3,77 +3,4 @@
 set(EXTERNAL_DIR "${CMAKE_SOURCE_DIR}/external")
 
-if(DISABLE_VCPKG)
-else()
-  # Enable vcpkg
-  set(CMAKE_TOOLCHAIN_FILE
-    "${EXTERNAL_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake")
-    
-  # Set the triplet
-  if(WIN32)
-    set(VCPKG_TARGET_TRIPLET "x64-windows-static" CACHE STRING "VCPKG Triplet")
-  elseif(APPLE)
-    execute_process(
-      COMMAND uname -m
-      COMMAND tr -d '\n'
-      OUTPUT_VARIABLE VCPKG_ARCHITECTURE)
-    message(STATUS "Architecture: ${VCPKG_ARCHITECTURE}")
-
-    if(${VCPKG_ARCHITECTURE} STREQUAL "arm64") # Apple Silicon
-      set(VCPKG_TARGET_TRIPLET "arm64-osx" CACHE STRING "VCPKG Triplet")
-    else()
-      set(VCPKG_TARGET_TRIPLET "x64-osx" CACHE STRING "VCPKG Triplet")
-    endif()
-  else()
-    execute_process(
-      COMMAND uname -m
-      COMMAND tr -d '\n'
-      OUTPUT_VARIABLE VCPKG_ARCHITECTURE)
-    message(STATUS "Architecture: ${VCPKG_ARCHITECTURE}")
-
-    if(${VCPKG_ARCHITECTURE} STREQUAL "x86_64")
-      set(VCPKG_TARGET_TRIPLET "x64-linux" CACHE STRING "VCPKG Triplet")
-    elseif(${VCPKG_ARCHITECTURE} STREQUAL "x86_86")
-      set(VCPKG_TARGET_TRIPLET "x86-linux" CACHE STRING "VCPKG Triplet")
-    elseif(${VCPKG_ARCHITECTURE} STREQUAL "aarch64")
-      set(VCPKG_TARGET_TRIPLET "arm64-linux" CACHE STRING "VCPKG Triplet")
-    elseif(${VCPKG_ARCHITECTURE} STREQUAL "arm64")
-      set(VCPKG_TARGET_TRIPLET "arm64-linux" CACHE STRING "VCPKG Triplet")
-    elseif(${VCPKG_ARCHITECTURE} MATCHES "arm.*")
-      set(VCPKG_TARGET_TRIPLET "arm-linux" CACHE STRING "VCPKG Triplet")
-    else()
-      set(VCPKG_TARGET_TRIPLET "${VCPKG_ARCHITECTURE}-linux" CACHE STRING "VCPKG Triplet")
-    endif()
-  endif()
-
-  # Some hacks to fix vcpkg
-  if(WIN32)
-    set(Protobuf_PROTOC_EXECUTABLE
-      "${EXTERNAL_DIR}/vcpkg/packages/protobuf_${VCPKG_TARGET_TRIPLET}/tools/protobuf/protoc.exe"
-    )
-    set(ZLIB_LIBRARY_RELEASE
-      "${CMAKE_CURRENT_BINARY_DIR}/vcpkg_installed/${VCPKG_TARGET_TRIPLET}/lib/zlib.lib"
-    )
-    set(ZLIB_LIBRARY_DEBUG
-      "${CMAKE_CURRENT_BINARY_DIR}/vcpkg_installed/${VCPKG_TARGET_TRIPLET}/debug/lib/zlibd.lib"
-    )
-  else()
-    # Make BoostConfig.cmake able to check its inputs
-    cmake_policy(SET CMP0057 NEW)
-
-    # Honor the visibility properties for all target types, including
-    # object libraries and static libraries.
-    cmake_policy(SET CMP0063 NEW)
-
-    # Don't ignore <PackageName>_ROOT variables
-    cmake_policy(SET CMP0074 NEW)
-    set(Protobuf_PROTOC_EXECUTABLE
-      "${EXTERNAL_DIR}/vcpkg/packages/protobuf_${VCPKG_TARGET_TRIPLET}/tools/protobuf/protoc"
-    )
-  endif()
-
-  set(Protobuf_USE_STATIC_LIBS ON)
-  set(protobuf_MSVC_STATIC_RUNTIME ON)
-endif()
-
 message(STATUS "VCPKG TRIPLET: ${VCPKG_TARGET_TRIPLET}")
 
@@ -107,30 +34,23 @@
 find_package(Unwind)
 
-if(DISABLE_VCPKG)
-add_subdirectory(external/Catch2)
-add_subdirectory(external/cxxopts)
-add_subdirectory(external/cpp-httplib)
-add_subdirectory(external/json)
-include_directories(
-  ${EXTERNAL_DIR}/cpp-httplib
-  ${EXTERNAL_DIR}/simpleini
-  ${EXTERNAL_DIR}/json/include
-  ${EXTERNAL_DIR}/cxxopts/include
-)
-else()
-find_package(Catch2 CONFIG REQUIRED)
-find_package(httplib CONFIG REQUIRED)
-find_package(cxxopts CONFIG REQUIRED)
-find_package(nlohmann_json CONFIG REQUIRED)
-find_path(SIMPLEINI_INCLUDE_DIRS "ConvertUTF.c")
-endif()
+include_directories(${EXTERNAL_DIR}/simpleini)
+find_package(Catch2 REQUIRED)
+find_package(httplib REQUIRED)
+find_package(cxxopts REQUIRED)
+find_package(nlohmann_json REQUIRED)

 # Optional packages
-find_package(UTempter)
-
+option(WITH_UTEMPTER "Enable support for utempter" OFF)
+if (WITH_UTEMPTER)
+  find_package(UTempter REQUIRED)
+endif(WITH_UTEMPTER)
+ 
 if(LINUX)
-  find_package(SELinux)
-endif()
-
+  option(WITH_SELINUX "Enable support for selinux" OFF)
+  if (WITH_SELINUX)
+    find_package(SELinux REQUIRED)
+  endif(WITH_SELINUX)
+endif(LINUX)
+ 
 if(MSVC)
   set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
@@ -161,15 +80,8 @@
 # Sentry doesn't work on BSD
 else()
-  # Enable sentry
-  set(USE_SENTRY TRUE)
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_SENTRY")
-endif()
-
-if(DISABLE_TELEMETRY)
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNO_TELEMETRY")
-endif()
-
-if(USE_SENTRY)
-  if(DISABLE_VCPKG)
+  # Optionally enable sentry
+  option(WITH_SENTRY "Enable Sentry crash logging" ON)
+  if (WITH_SENTRY)
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_SENTRY")
     set(SENTRY_BUILD_RUNTIMESTATIC ON)
     set(BUILD_SHARED_LIBS OFF)
@@ -178,9 +90,11 @@
       ${EXTERNAL_DIR}/sentry-native/include
     )
-  else()
-    find_package(sentry CONFIG REQUIRED)
   endif()
 endif()
 
+if(DISABLE_TELEMETRY)
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNO_TELEMETRY")
+endif()
+
 set(CMAKE_MODULE_PATH "${EXTERNAL_DIR}/cotire/CMake"
   ${CMAKE_MODULE_PATH})
@@ -254,5 +168,5 @@
 endif()
 
-if(SELINUX_FOUND)
+if(WITH_SELINUX)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_SELINUX")
 else()
@@ -261,5 +175,5 @@
 endif()
 
-if(UTEMPTER_FOUND)
+if(WITH_UTEMPTER)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_UTEMPTER")
 else()
@@ -318,5 +232,5 @@
 ENDIF()
 
-IF(USE_SENTRY)
+IF(WITH_SENTRY)
   list(INSERT CORE_LIBRARIES 0 sentry::sentry)
 ENDIF()
